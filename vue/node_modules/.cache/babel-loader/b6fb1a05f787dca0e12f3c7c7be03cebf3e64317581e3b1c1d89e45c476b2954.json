{"ast":null,"code":"import axios from \"axios\";\nconst request = axios.create({\n  //backend url\n  baseURL: 'http://localhost:9090',\n  timeout: 5000\n});\n\n//request interpreter\n//modify request before send it\n//such as add token on request header or encryption\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n//response interpreter\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n\n  //if a file is returned\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n\n  //if string returned\n  //check if it's an empty string or not\n  //if it's not an empty string and convertable to JSON string then we convert it to JSON\n  //if an empty string is returned then we don't convert it\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error);\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"sources":["D:/javaWeb/develop/ProjectFile/workhuman-demo/vue/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst request = axios.create(\r\n    {\r\n        //backend url\r\n        baseURL: 'http://localhost:9090',\r\n        timeout: 5000\r\n    }\r\n)\r\n\r\n//request interpreter\r\n//modify request before send it\r\n//such as add token on request header or encryption\r\nrequest.interceptors.request.use(config =>{\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n//response interpreter\r\nrequest.interceptors.response.use(\r\n    response =>{\r\n        let res = response.data;\r\n\r\n        //if a file is returned\r\n        if (response.config.responseType === 'blob'){\r\n            return res\r\n        }\r\n\r\n        //if string returned\r\n        //check if it's an empty string or not\r\n        //if it's not an empty string and convertable to JSON string then we convert it to JSON\r\n        //if an empty string is returned then we don't convert it\r\n        if (typeof res === 'string')\r\n        {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CACxB;EACI;EACAC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;AACb,CACJ,CAAC;;AAED;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAG;EACtCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EAEjE,OAAOD,MAAM;AACjB,CAAC,EAAEE,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACAR,OAAO,CAACI,YAAY,CAACO,QAAQ,CAACN,GAAG,CAC7BM,QAAQ,IAAG;EACP,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEvB;EACA,IAAIF,QAAQ,CAACL,MAAM,CAACQ,YAAY,KAAK,MAAM,EAAC;IACxC,OAAOF,GAAG;EACd;;EAEA;EACA;EACA;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAC3B;IACIA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAGA,GAAG;EACrC;EAEA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLS,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGV,KAAK,CAAC;EAC1B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}